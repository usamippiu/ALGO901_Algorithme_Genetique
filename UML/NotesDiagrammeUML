Classe Population
	But
		Représente une population d'individus. Contient les individus et leur caractéristiques.
	Attributs
		individus 	-> List, contient les individus constituant notre population.
		effectif 	-> Integer ou None, effectif de la population. Obligatoire pour générer des individus.
		performance	-> Objet de classe fille de Performance, contient la méthode d'évaluation et de sélection applicable à chaques individus de la population.
	Méthodes
		__init__()	-> Constructeur, peut prendre en paramètre un effectif. 
		genese() 	-> Génération aléatoire des individus de taille effectif.
		code() 		-> Appelle la méthode code() associé à la classe contenue dans l'attribut performance sur chaque individu.
		decode() 	-> Appelle la méthode decode() associé à la classe contenue dans l'attribut performance sur chaque individu.
		evaluation()	-> Enclenche le processus d'évaluation des individus. Génère, si ce n'est pas déjà fait, un score pour chacun d'eux.
		rechercheSol() 	-> Enclenche le processus de recherche de solution dans la population. Contrôle les scores de chaque individu.
		mutation(p)	-> Opère une mutation sur une proportion p d'individus de la population.

classe Individu
	But
		Représente un individu d'un population.
	Attributs
		coordonnees 	-> List[Coordonnee], liste des coordonnées de l'individus. Encodées ou non.
		score		-> None ou Float, contient le score d'évaluation de l'individu.
		codage 		-> Objet de classe fille de Codage, contient la méthode de codage et de décodage à appliquer à l'individu
	Méthodes
		code() 		-> Appel la méthode d'encodage de la classe contenu dans l'attribut codage.
		decode() 	-> Appel la méthode de décodage de la classe contenu dans l'attribut codage.

Classe Coordonnee
	But 
		Représente une coordonnée d'un individu.
	Attributs
		num_coord	-> Non-zero integer, numéro de la coordonnées
		valeur		-> Float ou List[Bool], valeur de la coordonnée, codée ou non.
		individu	-> Individu, l'individu qui possède cette coordonnnée.
		fenetre 	-> Fenetre, valeur dans lesquels se trouve la valeur de la coordonnée.
	Méthodes
		???

Classe Fenetre
	But 
		Représente la fenêtre de valeurs dans laquelle se trouve une coordonnée.
	Attributs
		min 		-> Float, borne inférieure des valeurs prisent par la coordonnée.
		max 		-> Float, borne supérieure des valeurs prisent par la coordonnée.	
	Méthodes
		???

Classe Codage
	But
		Représente un codage appliqué à une coodonnée.
	Méthodes
		code()		-> Fonction de codage des coordonées des individus, surchargée dans les classes filles.
		decode()	-> Fonction de décodage, surchargée dans les classes filles.

Classe Binaire(Codage)
	But 
		Contient les méthode de codage et décodage en binaire applicable à un objet Coordonnée.
	Attributs
		nom 		-> String, référence de la méthode de codage.
	Méthodes
		code()		-> Fonction de codage des coordonées des individus, de réel à binaire.
		decode()	-> Fonction de décodage, de binaire à réel.
		
Classe Hexadecimal(Codage)
	But 
		Contient les méthode de codage et décodage en héxadécilal applicable à un objet Coordonnée.
		
	Attributs
		nom 		-> String, référence de la méthode de codage
	Méthodes
		code()		-> Fonction de codage des coordonées des individus, de réel à héxadécimal.
		decode()	-> Fonction de décodage, de héxadécimal à réel.	
	
Classe Performance
	But 	
		Classe mère à laquelle sont relié les classes représentant chaque fonction d'erreur (représenté dans les classes filles) que l'on souhaite conscidérer.
	Attributs
		f		-> Fonction du problème d'optimisation
		epsilon		-> Erreur d'approximation de la solution
		nb_iter_max	-> Nombre maximal de cycle de génération pour évité de faire tourner l'algorithme trop longtemps.
	Méthodes
		evaluation() 	-> ???, surcharge dans la classe fille

Classe ErreurMoyenneQuandratique(Performance)
	But	
		Classe fille de performance, représente et contient toutes les caractéristiques de l'évaluation d'un individu avec la fonction d'erreur en moyenne quadratique.
	
	Attributs
		MSE 		-> Fonction qui permet de calculer l'erreur en moyenne quadratique
	Méthodes
		???

Classe ErreurAbsolueMoyenne(Performance)
	But
		Clase fille de performance, représente et contient toutes les caractéristiques de l'évaluation d'un individu avec la fonction en moyenne absolue.
	Attributs
		MAE 		-> Fonction qui permer de calculer l'erreur en moyenne absolue
	Méthodes
		???
		
QUESTIONS 
	- Implémentation fonction de mesure d'erreur ? Choix de cette fonction ? 	-> Classe de fonction d'erreur
	- Génèse au moment de la création de l'objet Population ? 			-> rentrer les caractéristiques et ensuite genèse manuelle
	- Renommer Fenetre en un nom plus approprié ? 					-> Plan secondaire

IDEES
	- Faire une évolution des individus juste après la Genèse
	- Paramètre d'entrée :
		-> Performance.FonctionErreur(f, epsilon, nb_iter_max) 	: Object de classe fille de performance (fonction erreur)
		-> ListFenetres 					: List[Fenetre], représente le pavé de Rn sur lequel on génère notre population
		-> Codage.MethodeCodage					: Objets de classe fille de codage
	
	
	
TACHES 
	- Voir classe Selection, Croisement et Mutation
	- Rajout des classes coordonnées et fenetres 										FAIT
	- Mettre en place classe Codage et ses classes filles (codage binaire, hexadécimal) 					FAIT
	- Mettre en place classe Performance et classe filles (MAE, MSE)							FAIT
	- Rajouter le but de chaques classes 											FAIT
	
		BROUILLON TACHES
			-> Classe codage avec les codages que nous allons utilisé contunue dans les classes filles
				-> Paramètres :			codage(), decodage()
			-> Classe Performance dont les classes filles sont les fonctions erreurs
				-> Paramaètres :		f		-> fonction du problème d'Optimisation
								epsilon 	-> erreur d'approximation de la solution
								nb_iter _max 	-> Nombre d'itération max de l'algorithme
				-> Paramètres classe fille : 	E 		-> Fonction d'erreur
								nom		-> Référence de la fonction d'erreur				
			-> Mutation ne suffit pas la population peut quand meme degénér (min local) il faut toruver une autre solution en plus				
			-> Performance fille attribué à population, score de performance attribué à individu			
			-> Codage directement sur Coordonées	
		
PLAN D'ACTION
	1. Première version du fichier d'explication des classes
	2. Première version du diagramme de classe
	3. Comparer avec le code déjà construit et :
		(i) 	Créer des questions
		(ii) 	Créer des tâches
		(iii) 	Commencer l'adaptation du digramme + doc et commencer struture code			
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
